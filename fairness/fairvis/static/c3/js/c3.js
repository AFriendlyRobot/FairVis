// Generated by CoffeeScript 1.11.1
(function() {
  var c3,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  c3 = (function() {
    function c3() {}

    c3.version = "0.1";

    c3.select = function(parent, query, before, children_only) {
      return new c3.Selection(parent, query, before, children_only);
    };

    return c3;

  })();

  this.c3 = c3;

  if ((typeof module !== "undefined" && module !== null)) {
    module.exports = c3;
  }

  if (typeof d3 === "undefined" || d3 === null) {
    throw Error("D3 library is required for C3");
  }

  c3.util = (function() {
    function util() {}

    util.extend = function(dest, src) {
      var k, v;
      if (src != null) {
        for (k in src) {
          v = src[k];
          dest[k] = v;
        }
        return dest;
      }
    };

    util.defaults = function(dest, src) {
      var k, v;
      if (src != null) {
        for (k in src) {
          v = src[k];
          if (dest[k] == null) {
            dest[k] = v;
          }
        }
        return dest;
      }
    };

    util.spin = function(ms) {
      var start;
      start = new Date();
      while (new Date() - start < ms) {
        null;
      }
    };

    util.isEmpty = function(obj) {
      var property;
      for (property in obj) {
        return false;
      }
      return true;
    };

    return util;

  })();

  c3.array = (function() {
    function array() {}

    array.remove_item = function(arr, item) {
      return arr.splice(arr.indexOf(item), 1);
    };

    array.sort_up = function(arr, accessor) {
      if (accessor == null) {
        accessor = function(d) {
          return d;
        };
      }
      if (typeof crossfilter !== "undefined" && crossfilter !== null) {
        crossfilter.quicksort.by(accessor)(arr, 0, arr.length);
        return arr;
      } else {
        return arr.sort(function(a, b) {
          return accessor(a) - accessor(b);
        });
      }
    };

    array.sort_down = function(arr, accessor) {
      if (typeof crossfilter !== "undefined" && crossfilter !== null) {
        c3.array.sort_up(arr, function(d) {
          return -accessor(d);
        });
        return arr;
      } else {
        return arr.sort(function(a, b) {
          return accessor(b) - accessor(a);
        });
      }
    };

    return array;

  })();

  c3.http = (function() {
    function http() {}

    http.deparam = function(string, key) {
      var l, len, pair, params, ref, split;
      if (!string) {
        return (key ? null : {});
      }
      params = {};
      ref = string.split('&');
      for (l = 0, len = ref.length; l < len; l++) {
        pair = ref[l];
        split = pair.split('=');
        if (split[0] === key) {
          return (split[1] != null ? split[1] : '');
        }
        params[split[0]] = split[1];
      }
      if (key) {
        return null;
      } else {
        return params;
      }
    };

    http.deparam_query = function(key) {
      return c3.http.deparam(document.location.search.slice(1), key);
    };

    return http;

  })();

  c3.html = (function() {
    var escapes, token, tokens;

    function html() {}

    escapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;',
      '/': '&#x2F;',
      ',': '&#44;'
    };

    tokens = '[' + ((function() {
      var results;
      results = [];
      for (token in escapes) {
        results.push(token);
      }
      return results;
    })()) + ']';

    html.escape = function(string) {
      return String(string).replace(RegExp(tokens, 'g'), function(d) {
        return escapes[d];
      });
    };

    return html;

  })();

  c3.d3 = (function() {
    function d3() {}

    d3.set_range = function(scale, interval) {
      var ref;
      if (interval[0] === 0 && interval[1] === 0) {
        interval = [0, 1];
      }
      return (ref = scale != null ? typeof scale.rangePoints === "function" ? scale.rangePoints(interval) : void 0 : void 0) != null ? ref : scale != null ? scale.range(interval) : void 0;
    };

    return d3;

  })();

  c3.functor = function(f) {
    if (typeof f === 'function') {
      return f;
    } else {
      return function() {
        return f;
      };
    }
  };

  c3.Selection = (function() {
    function Selection() {}

    return Selection;

  })();

  c3.Selection.Options = (function() {
    function Options() {}

    Options.prototype["class"] = void 0;

    Options.prototype.classes = void 0;

    Options.prototype.styles = void 0;

    Options.prototype.events = void 0;

    Options.prototype.text = void 0;

    Options.prototype.html = void 0;

    Options.prototype.title = void 0;

    Options.prototype.animate = void 0;

    Options.prototype.duration = void 0;

    Options.prototype.animate_old = void 0;

    return Options;

  })();

  c3.Selection = (function() {
    Selection.prototype.all = d3.select();

    Selection.prototype["new"] = d3.select();

    Selection.prototype.old = d3.select();

    Selection.prototype.opt = {};

    Selection.prototype.opt_array = void 0;

    function Selection(d3_selection, query1, before1, children_only) {
      var ref, ref1, ref2;
      if (d3_selection == null) {
        d3_selection = d3.select();
      }
      this.query = query1;
      this.before = before1;
      this.node = bind(this.node, this);
      this.style = bind(this.style, this);
      this.position_tweens = bind(this.position_tweens, this);
      this.position = bind(this.position, this);
      this.update = bind(this.update, this);
      this.remove = bind(this.remove, this);
      this.bind = bind(this.bind, this);
      this.singleton = bind(this.singleton, this);
      this.inherit = bind(this.inherit, this);
      if (this.query) {
        if (indexOf.call(this.query, '|') >= 0) {
          ref = this.query.split('|'), this.namespace = ref[0], this.query = ref[1];
        }
        ref1 = this.query.split(' ').slice(-1)[0].split(/\.(.+)/), this.tag = ref1[0], this._query_class = ref1[1];
        if (this.namespace) {
          this.tag = this.namespace + ':' + this.tag;
        }
        this._query_class = (ref2 = this._query_class) != null ? ref2.replace('.', ' ') : void 0;
        if (d3_selection != null) {
          this.all = d3_selection.selectAll(this.query);
          if (children_only) {
            this.all = this.all.filter(function() {
              return d3_selection.some((function(_this) {
                return function(nodes) {
                  var ref3;
                  return ref3 = _this.parentNode, indexOf.call(nodes, ref3) >= 0;
                };
              })(this));
            });
          }
        }
      } else {
        this.all = d3_selection;
      }
    }

    Selection.prototype.select = function(query, before, children_only) {
      return new c3.Selection(this.all, query, before, children_only);
    };

    Selection.prototype.inherit = function(query, create, prepend) {
      var child;
      if (create == null) {
        create = true;
      }
      if (prepend == null) {
        prepend = false;
      }
      child = new c3.Selection(null, query);
      if (create) {
        child["new"] = this["new"].insert(child.tag, (prepend ? ':first-child' : null));
        if (create === 'restore' && child["new"].empty() && !this.all.empty()) {
          this.all.each(function() {
            var child_node, parent;
            parent = d3.select(this);
            child_node = parent.selectAll(child.tag).data(parent.data()).enter().append(child.tag);
            if (child._query_class != null) {
              return child_node.classed(child._query_class, true);
            }
          });
        }
        if (child._query_class != null) {
          child["new"].classed(child._query_class, true);
        }
      }
      child.all = this.all.select(query);
      child.old = this.old.select(query);
      return child;
    };

    Selection.prototype.singleton = function(datum) {
      return this.bind([datum]);
    };

    Selection.prototype.bind = function(data, key1) {
      var animate, ref;
      this.key = key1;
      if (!this.tag) {
        throw "Cannot bind() a selection that doesn't have a selection query set";
      }
      animate = this._animate && this.opt.duration && (((ref = this.opt.styles) != null ? ref.opacity : void 0) == null);
      this.all = this.all.data(data, this.key);
      if (animate) {
        this.all.style('opacity', 1).interrupt('binding');
      }
      this["new"] = this.all.enter().insert(this.tag, this.before);
      this.old = this.all.exit();
      if (this._query_class != null) {
        this["new"].classed(this._query_class, true);
      }
      if (animate) {
        this["new"].style('opacity', 0);
        this["new"].transition('binding').duration(this.opt.duration).style('opacity', 1);
        this.old.transition('binding').duration(this.opt.duration).style('opacity', 0).remove();
      } else {
        this.old.remove();
      }
      return this;
    };

    Selection.prototype.remove = function() {
      if (this._animate) {
        return this.all.duration(this.opt.duration).style('opacity', 0).remove();
      } else {
        return this.all.remove();
      }
    };

    Selection.prototype.options = function(opt1, opt_accessor1) {
      var base;
      this.opt = opt1 != null ? opt1 : {};
      this.opt_accessor = opt_accessor1;
      if ((base = this.opt).duration == null) {
        base.duration = 750;
      }
      return this;
    };

    Selection.prototype.animate = function(animate) {
      if (animate == null) {
        animate = true;
      }
      if (this.opt == null) {
        throw "Please call options() before animate()";
      }
      this._animate = animate && this.opt.animate;
      return this;
    };

    Selection.prototype.update = function() {
      var opt_accessor, selection, self;
      if (this.opt["class"] != null) {
        this["new"].attr('class', this.opt["class"]);
      }
      if (this._query_class != null) {
        this["new"].classed(this._query_class, true);
      }
      if (this.opt.html != null) {
        this.all.html(this.opt.html);
      } else if (this.opt.text != null) {
        this.all.text(this.opt.text);
      }
      if (this.opt.title != null) {
        selection = (typeof this.opt.title === 'function' ? this.all : this["new"]);
        if (this.all.node() instanceof SVGElement) {
          this["new"].append('title');
          if (selection.length <= 1) {
            selection.select('title').text(this.opt.title);
          } else {
            self = this;
            selection.each(function(d, i, j) {
              return d3.select(this).selectAll('title').text(self.opt.title(d, i, j));
            });
          }
        } else {
          selection.attr('title', this.opt.title);
        }
      }
      if (this.opt.events != null) {
        this["new"].on(this.opt.events);
      }
      if (this.opt_accessor != null) {
        opt_accessor = this.opt_accessor;
        this.all.each(function(d, i, j) {
          var node, opt, title;
          if (opt = opt_accessor(d, i, j)) {
            node = d3.select(this);
            if (opt.events != null) {
              node.on(opt.events);
            }
            if (opt.title != null) {
              if (this instanceof SVGElement) {
                title = node.selectAll('title').data([d]);
                title.enter().append('title');
                title.text(opt.title);
              } else {
                node.attr('title', opt.title);
              }
            }
            if (opt.html != null) {
              return node.html(opt.html);
            } else if (opt.text != null) {
              return node.text(opt.text);
            }
          }
        });
      }
      return this;
    };

    Selection.prototype.position = function(attrs) {
      var selection;
      if (this._animate) {
        this["new"].attr(attrs);
        selection = this.all.transition('position.attrs').duration(this.opt.duration);
      } else {
        selection = this.all;
      }
      selection.attr(attrs);
      if (this._animate && this.opt.animate_old) {
        this.old.transition('position.attrs').duration(this.opt.duration).attr(attrs);
      }
      return this;
    };

    Selection.prototype.position_tweens = function(attrs) {
      var name, transition, tween;
      transition = this.all.transition('position.tweens').duration(this._animate ? this.opt.duration : 0);
      for (name in attrs) {
        tween = attrs[name];
        transition.attrTween(name, tween);
      }
      if (this._animate && this.opt.animate_old) {
        transition = this.old.transition('position.tweens').duration(this.opt.duration);
        for (name in attrs) {
          tween = attrs[name];
          transition.attrTween(name, tween);
        }
      }
      return this;
    };

    Selection.prototype.style = function(style_new) {
      var opt_accessor, selection;
      selection = style_new && (this.key != null) ? this["new"] : this.all;
      if ((this.opt["class"] != null) && typeof this.opt["class"] === 'function') {
        selection.attr('class', this.opt["class"]);
        if (this._query_class != null) {
          selection.classed(this._query_class, true);
        }
      }
      if (this.opt.classes != null) {
        selection.classed(this.opt.classes);
      }
      if (this.opt.styles != null) {
        selection.style(this.opt.styles);
      }
      if (this.opt_accessor != null) {
        opt_accessor = this.opt_accessor;
        selection.each(function(d, i, j) {
          var node, opt;
          if (opt = opt_accessor(d, i, j)) {
            node = d3.select(this);
            if (opt["class"] != null) {
              node.classed((typeof opt["class"] === 'function' ? opt["class"](d, i, j) : opt["class"]), true);
            }
            if (opt.classes != null) {
              node.classed(opt.classes);
            }
            if (opt.styles != null) {
              return node.style(opt.styles);
            }
          }
        });
      }
      return this;
    };

    Selection.prototype.node = function() {
      return this.all.node();
    };

    return Selection;

  })();

  c3.Dispatch = (function() {
    function Dispatch() {
      this.dispatcher = {};
    }

    Dispatch.prototype.on = function(event, handler) {
      var base, namespace, ref;
      ref = event.split('.'), event = ref[0], namespace = ref[1];
      if ((base = this.dispatcher)[event] == null) {
        base[event] = {};
      }
      if (handler) {
        return this.dispatcher[event][namespace] = handler;
      } else {
        return delete this.dispatcher[event][namespace];
      }
    };

    Dispatch.prototype.trigger = function() {
      var args, event, handler, handlers, namespace;
      event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if ((handlers = this.dispatcher[event]) != null) {
        for (namespace in handlers) {
          handler = handlers[namespace];
          handler.apply(this, args);
        }
      }
    };

    return Dispatch;

  })();

  c3.Base = (function() {
    Base.prototype.anchor = void 0;

    Base.prototype.height = void 0;

    Base.prototype.width = void 0;

    Base.prototype.anchor_styles = void 0;

    Base.prototype.handlers = void 0;

    function Base(opt) {
      this.restyle = bind(this.restyle, this);
      this.redraw = bind(this.redraw, this);
      this.resize = bind(this.resize, this);
      this.render = bind(this.render, this);
      c3.util.extend(this, new c3.Dispatch);
      c3.util.extend(this, opt);
    }

    Base.prototype.render = function(opt) {
      c3.util.extend(this, opt);
      this.trigger('render_start');
      this.init();
      this.trigger('render');
      this.trigger('resize_start');
      if (!this.rendered) {
        this.size(this.width, this.height);
      } else {
        this.size();
      }
      this.trigger('resize');
      this.trigger('redraw_start', 'render');
      this.update('render');
      this.draw('render');
      this.trigger('redraw', 'render');
      this.trigger('restyle_start', false);
      this.style(true);
      this.trigger('restyle', false);
      this.rendered = true;
      this.trigger('rendered');
      return this;
    };

    Base.prototype.resize = function(width, height) {
      if (this.rendered) {
        this.trigger('resize_start');
        this.size(width, height);
        this.trigger('resize');
        this.trigger('redraw_start', 'resize');
        this.draw('resize');
        this.trigger('redraw', 'resize');
        return this;
      }
    };

    Base.prototype.redraw = function(origin) {
      if (origin == null) {
        origin = 'redraw';
      }
      if (this.rendered) {
        this.trigger('redraw_start', origin);
        this.update(origin);
        this.draw(origin);
        this.trigger('redraw', origin);
        this.trigger('restyle_start', true);
        this.style(true);
        this.trigger('restyle', true);
        return this;
      }
    };

    Base.prototype.restyle = function() {
      if (this.rendered) {
        this.trigger('restyle_start', false);
        this.style(false);
        this.trigger('restyle', false);
        return this;
      }
    };

    Base.prototype.init = function() {
      this._prep();
      return this._init();
    };

    Base.prototype._prep = function() {
      var anchor_selector, d3_anchor, event, handler, ref, results;
      anchor_selector = this.anchor;
      if (this.anchor == null) {
        this.anchor = document.createElement('div');
      }
      d3_anchor = d3.select(this.anchor);
      this.anchor = d3_anchor.node();
      if (!this.anchor) {
        throw "Unable to find anchor: " + anchor_selector;
      }
      if (this.anchor_styles != null) {
        d3_anchor.style(this.anchor_styles);
      }
      if (this.handlers != null) {
        ref = this.handlers;
        results = [];
        for (event in ref) {
          handler = ref[event];
          results.push(this.on(event, handler));
        }
        return results;
      }
    };

    Base.prototype._init = function() {};

    Base.prototype.size = function(width, height) {
      if (width != null) {
        this.anchor.style.width = (typeof width === 'number' ? width + 'px' : width);
      }
      if (height != null) {
        this.anchor.style.height = (typeof height === 'number' ? height + 'px' : height);
      }
      this.width = this.anchor.offsetWidth;
      this.height = this.anchor.offsetHeight;
      return this._size();
    };

    Base.prototype._size = function() {};

    Base.prototype.update = function(origin) {
      return this._update(origin);
    };

    Base.prototype._update = function() {};

    Base.prototype.draw = function(origin) {
      return this._draw(origin);
    };

    Base.prototype._draw = function() {};

    Base.prototype.style = function(style_new) {
      return this._style(style_new);
    };

    Base.prototype._style = function() {};

    return Base;

  })();

  c3.Chart = (function(superClass) {
    extend(Chart, superClass);

    function Chart() {
      return Chart.__super__.constructor.apply(this, arguments);
    }

    Chart.prototype.type = 'chart';

    Chart.prototype["class"] = void 0;

    Chart.prototype.options = void 0;

    Chart.prototype.content_options = void 0;

    Chart.prototype.init = function() {
      var prototype;
      this._prep();
      this.svg = c3.select(d3.select(this.anchor), 'svg', null, true).singleton().options(this.options).update();
      this.svg.all.attr('class', 'c3 ' + (this["class"] != null ? this["class"] : '')).attr('height', '100%').attr('width', '100%').on('contextmenu', function() {
        return d3.event.preventDefault();
      });
      this.content = this.svg.select('g.content', null, true).singleton().options(this.content_options).update();
      prototype = Object.getPrototypeOf(this);
      while (prototype) {
        if (prototype.type != null) {
          this.svg.all.classed(prototype.type, true);
          this.content.all.classed(prototype.type, true);
        }
        prototype = Object.getPrototypeOf(prototype);
      }
      return this._init();
    };

    Chart.prototype.style = function() {
      this.svg.style();
      this.content.style();
      return Chart.__super__.style.apply(this, arguments);
    };

    return Chart;

  })(c3.Base);

  document.addEventListener('DOMContentLoaded', function() {
    var fade_left, fade_right, mask_fade_left, mask_fade_right;
    if (!c3.global_svg) {
      c3.global_svg = d3.select('body').append('svg').attr('class', 'c3 global');
      c3.global_defs = c3.global_svg.append('defs');
      fade_right = c3.global_defs.append('linearGradient').attr('id', 'gradient_for_mask_fade_right');
      fade_right.append('stop').attr('offset', 0.5).attr('stop-color', 'white').attr('stop-opacity', 1);
      fade_right.append('stop').attr('offset', 0.9).attr('stop-color', 'white').attr('stop-opacity', 0);
      fade_left = c3.global_defs.append('linearGradient').attr('id', 'gradient_for_mask_fade_left');
      fade_left.append('stop').attr('offset', 0.1).attr('stop-color', 'white').attr('stop-opacity', 0);
      fade_left.append('stop').attr('offset', 0.5).attr('stop-color', 'white').attr('stop-opacity', 1);
      mask_fade_right = c3.global_defs.append('mask').attr('id', 'mask_fade_right').attr('maskContentUnits', 'objectBoundingBox').attr('x', -1).attr('y', -500000).attr('height', 1000000).attr('width', 2).append('rect').attr('x', -1).attr('y', -500000).attr('height', 1000000).attr('width', 2).attr('fill', "url(#" + (fade_right.attr('id')) + ")");
      return mask_fade_left = c3.global_defs.append('mask').attr('id', 'mask_fade_left').attr('maskContentUnits', 'objectBoundingBox').attr('y', -500000).attr('height', 1000000).attr('width', 2).append('rect').attr('y', -500000).attr('height', 1000000).attr('width', 2).attr('fill', "url(#" + (fade_left.attr('id')) + ")");
    }
  });

}).call(this);

//# sourceMappingURL=c3.js.map
